name: Health Check Workflow
'on':
  pull_request:
    types:
    - opened
    - synchronize
    - reopened
  schedule:
  - cron: 0 6 * * *
  workflow_dispatch: {}
permissions: {}
run-name: Health Check Workflow
jobs:
  health_check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@main
      with:
        token: ${{ secrets.REPO_TOKEN }}
    - name: Setup Git
      run: git config --global user.email "github-actions[bot]@users.noreply.github.com"
        && git config --global user.name "github-actions[bot]"
    - name: Setup Python
      uses: actions/setup-python@main
      with:
        python-version: '3.13'
    - name: Install Poetry
      run: curl -sSL https://install.python-poetry.org | python3 -
    - name: Install Dependencies
      run: poetry install
    - name: Setup CI keyring
      run: 'poetry run pip install keyrings.alt && poetry run python -c "import keyring;
        from keyrings.alt.file import PlaintextKeyring; keyring.set_keyring(PlaintextKeyring());
        keyring.set_password(''video_vault'',''ci_user'',''ci-secret-token''); print(''Keyring
        OK:'', keyring.get_password(''video_vault'',''ci_user''))" '
    - name: Install PySide6 System Dependencies
      run: sudo apt-get update && sudo apt-get install -y libegl1 libpulse0
      env:
        REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
    - name: Protect Repository
      run: poetry run python -m winipedia_utils.git.github.repo.protect
      env:
        REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
    - name: Run Hooks
      run: poetry run pre-commit run --all-files --verbose
      env:
        QT_QPA_PLATFORM: offscreen
        QTWEBENGINE_DISABLE_SANDBOX: '1'
        QTWEBENGINE_CHROMIUM_FLAGS: --no-sandbox --disable-gpu --disable-software-rasterizer
          --disable-dev-shm-usage
    - name: Commit added changes
      run: 'git commit --no-verify -m ''[skip ci] CI/CD: Committing possible added
        changes (e.g.: pyproject.toml and poetry.lock)'''
    - name: Extract Version from pyproject.toml
      id: version
      run: 'version=$(poetry version -s) && echo "Project version: $version" && echo
        "version=v$version" >> $GITHUB_OUTPUT'
